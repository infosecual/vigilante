// Code generated by mockery v2.51.0. DO NOT EDIT.

package mocks

import (
	context "context"

	bbnclient "github.com/babylonlabs-io/babylon-staking-indexer/internal/clients/bbnclient"

	coretypes "github.com/cometbft/cometbft/rpc/core/types"

	mock "github.com/stretchr/testify/mock"

	time "time"
)

// BbnInterface is an autogenerated mock type for the BbnInterface type
type BbnInterface struct {
	mock.Mock
}

// GetAllStakingParams provides a mock function with given fields: ctx
func (_m *BbnInterface) GetAllStakingParams(ctx context.Context) (map[uint32]*bbnclient.StakingParams, error) {
	ret := _m.Called(ctx)

	if len(ret) == 0 {
		panic("no return value specified for GetAllStakingParams")
	}

	var r0 map[uint32]*bbnclient.StakingParams
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context) (map[uint32]*bbnclient.StakingParams, error)); ok {
		return rf(ctx)
	}
	if rf, ok := ret.Get(0).(func(context.Context) map[uint32]*bbnclient.StakingParams); ok {
		r0 = rf(ctx)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(map[uint32]*bbnclient.StakingParams)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context) error); ok {
		r1 = rf(ctx)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetBlock provides a mock function with given fields: ctx, blockHeight
func (_m *BbnInterface) GetBlock(ctx context.Context, blockHeight *int64) (*coretypes.ResultBlock, error) {
	ret := _m.Called(ctx, blockHeight)

	if len(ret) == 0 {
		panic("no return value specified for GetBlock")
	}

	var r0 *coretypes.ResultBlock
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *int64) (*coretypes.ResultBlock, error)); ok {
		return rf(ctx, blockHeight)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *int64) *coretypes.ResultBlock); ok {
		r0 = rf(ctx, blockHeight)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*coretypes.ResultBlock)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *int64) error); ok {
		r1 = rf(ctx, blockHeight)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetBlockResults provides a mock function with given fields: ctx, blockHeight
func (_m *BbnInterface) GetBlockResults(ctx context.Context, blockHeight *int64) (*coretypes.ResultBlockResults, error) {
	ret := _m.Called(ctx, blockHeight)

	if len(ret) == 0 {
		panic("no return value specified for GetBlockResults")
	}

	var r0 *coretypes.ResultBlockResults
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *int64) (*coretypes.ResultBlockResults, error)); ok {
		return rf(ctx, blockHeight)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *int64) *coretypes.ResultBlockResults); ok {
		r0 = rf(ctx, blockHeight)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*coretypes.ResultBlockResults)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *int64) error); ok {
		r1 = rf(ctx, blockHeight)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetCheckpointParams provides a mock function with given fields: ctx
func (_m *BbnInterface) GetCheckpointParams(ctx context.Context) (*bbnclient.CheckpointParams, error) {
	ret := _m.Called(ctx)

	if len(ret) == 0 {
		panic("no return value specified for GetCheckpointParams")
	}

	var r0 *bbnclient.CheckpointParams
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context) (*bbnclient.CheckpointParams, error)); ok {
		return rf(ctx)
	}
	if rf, ok := ret.Get(0).(func(context.Context) *bbnclient.CheckpointParams); ok {
		r0 = rf(ctx)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*bbnclient.CheckpointParams)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context) error); ok {
		r1 = rf(ctx)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetLatestBlockNumber provides a mock function with given fields: ctx
func (_m *BbnInterface) GetLatestBlockNumber(ctx context.Context) (int64, error) {
	ret := _m.Called(ctx)

	if len(ret) == 0 {
		panic("no return value specified for GetLatestBlockNumber")
	}

	var r0 int64
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context) (int64, error)); ok {
		return rf(ctx)
	}
	if rf, ok := ret.Get(0).(func(context.Context) int64); ok {
		r0 = rf(ctx)
	} else {
		r0 = ret.Get(0).(int64)
	}

	if rf, ok := ret.Get(1).(func(context.Context) error); ok {
		r1 = rf(ctx)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// IsRunning provides a mock function with no fields
func (_m *BbnInterface) IsRunning() bool {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for IsRunning")
	}

	var r0 bool
	if rf, ok := ret.Get(0).(func() bool); ok {
		r0 = rf()
	} else {
		r0 = ret.Get(0).(bool)
	}

	return r0
}

// Start provides a mock function with no fields
func (_m *BbnInterface) Start() error {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for Start")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func() error); ok {
		r0 = rf()
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// Subscribe provides a mock function with given fields: subscriber, query, healthCheckInterval, maxEventWaitInterval, outCapacity
func (_m *BbnInterface) Subscribe(subscriber string, query string, healthCheckInterval time.Duration, maxEventWaitInterval time.Duration, outCapacity ...int) (<-chan coretypes.ResultEvent, error) {
	_va := make([]interface{}, len(outCapacity))
	for _i := range outCapacity {
		_va[_i] = outCapacity[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, subscriber, query, healthCheckInterval, maxEventWaitInterval)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for Subscribe")
	}

	var r0 <-chan coretypes.ResultEvent
	var r1 error
	if rf, ok := ret.Get(0).(func(string, string, time.Duration, time.Duration, ...int) (<-chan coretypes.ResultEvent, error)); ok {
		return rf(subscriber, query, healthCheckInterval, maxEventWaitInterval, outCapacity...)
	}
	if rf, ok := ret.Get(0).(func(string, string, time.Duration, time.Duration, ...int) <-chan coretypes.ResultEvent); ok {
		r0 = rf(subscriber, query, healthCheckInterval, maxEventWaitInterval, outCapacity...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(<-chan coretypes.ResultEvent)
		}
	}

	if rf, ok := ret.Get(1).(func(string, string, time.Duration, time.Duration, ...int) error); ok {
		r1 = rf(subscriber, query, healthCheckInterval, maxEventWaitInterval, outCapacity...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// UnsubscribeAll provides a mock function with given fields: subscriber
func (_m *BbnInterface) UnsubscribeAll(subscriber string) error {
	ret := _m.Called(subscriber)

	if len(ret) == 0 {
		panic("no return value specified for UnsubscribeAll")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(string) error); ok {
		r0 = rf(subscriber)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// NewBbnInterface creates a new instance of BbnInterface. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewBbnInterface(t interface {
	mock.TestingT
	Cleanup(func())
}) *BbnInterface {
	mock := &BbnInterface{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
