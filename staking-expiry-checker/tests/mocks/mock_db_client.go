// Code generated by mockery v2.44.1. DO NOT EDIT.

package mocks

import (
	context "context"

	db "github.com/babylonlabs-io/staking-expiry-checker/internal/db"
	mock "github.com/stretchr/testify/mock"

	model "github.com/babylonlabs-io/staking-expiry-checker/internal/db/model"

	primitive "go.mongodb.org/mongo-driver/bson/primitive"

	types "github.com/babylonlabs-io/staking-expiry-checker/internal/types"
)

// DbInterface is an autogenerated mock type for the DbInterface type
type DbInterface struct {
	mock.Mock
}

// DeleteExpiredDelegation provides a mock function with given fields: ctx, id
func (_m *DbInterface) DeleteExpiredDelegation(ctx context.Context, id primitive.ObjectID) error {
	ret := _m.Called(ctx, id)

	if len(ret) == 0 {
		panic("no return value specified for DeleteExpiredDelegation")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, primitive.ObjectID) error); ok {
		r0 = rf(ctx, id)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// FindExpiredDelegations provides a mock function with given fields: ctx, btcTipHeight
func (_m *DbInterface) FindExpiredDelegations(ctx context.Context, btcTipHeight uint64) ([]model.TimeLockDocument, error) {
	ret := _m.Called(ctx, btcTipHeight)

	if len(ret) == 0 {
		panic("no return value specified for FindExpiredDelegations")
	}

	var r0 []model.TimeLockDocument
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, uint64) ([]model.TimeLockDocument, error)); ok {
		return rf(ctx, btcTipHeight)
	}
	if rf, ok := ret.Get(0).(func(context.Context, uint64) []model.TimeLockDocument); ok {
		r0 = rf(ctx, btcTipHeight)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]model.TimeLockDocument)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, uint64) error); ok {
		r1 = rf(ctx, btcTipHeight)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetBTCDelegationByStakingTxHash provides a mock function with given fields: ctx, stakingTxHash
func (_m *DbInterface) GetBTCDelegationByStakingTxHash(ctx context.Context, stakingTxHash string) (*model.DelegationDocument, error) {
	ret := _m.Called(ctx, stakingTxHash)

	if len(ret) == 0 {
		panic("no return value specified for GetBTCDelegationByStakingTxHash")
	}

	var r0 *model.DelegationDocument
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, string) (*model.DelegationDocument, error)); ok {
		return rf(ctx, stakingTxHash)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string) *model.DelegationDocument); ok {
		r0 = rf(ctx, stakingTxHash)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*model.DelegationDocument)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, string) error); ok {
		r1 = rf(ctx, stakingTxHash)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetBTCDelegationState provides a mock function with given fields: ctx, stakingTxHash
func (_m *DbInterface) GetBTCDelegationState(ctx context.Context, stakingTxHash string) (*types.DelegationState, error) {
	ret := _m.Called(ctx, stakingTxHash)

	if len(ret) == 0 {
		panic("no return value specified for GetBTCDelegationState")
	}

	var r0 *types.DelegationState
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, string) (*types.DelegationState, error)); ok {
		return rf(ctx, stakingTxHash)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string) *types.DelegationState); ok {
		r0 = rf(ctx, stakingTxHash)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*types.DelegationState)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, string) error); ok {
		r1 = rf(ctx, stakingTxHash)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetBTCDelegationsByStates provides a mock function with given fields: ctx, states, paginationToken
func (_m *DbInterface) GetBTCDelegationsByStates(ctx context.Context, states []types.DelegationState, paginationToken string) (*db.DbResultMap[model.DelegationDocument], error) {
	ret := _m.Called(ctx, states, paginationToken)

	if len(ret) == 0 {
		panic("no return value specified for GetBTCDelegationsByStates")
	}

	var r0 *db.DbResultMap[model.DelegationDocument]
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, []types.DelegationState, string) (*db.DbResultMap[model.DelegationDocument], error)); ok {
		return rf(ctx, states, paginationToken)
	}
	if rf, ok := ret.Get(0).(func(context.Context, []types.DelegationState, string) *db.DbResultMap[model.DelegationDocument]); ok {
		r0 = rf(ctx, states, paginationToken)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*db.DbResultMap[model.DelegationDocument])
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, []types.DelegationState, string) error); ok {
		r1 = rf(ctx, states, paginationToken)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Ping provides a mock function with given fields: ctx
func (_m *DbInterface) Ping(ctx context.Context) error {
	ret := _m.Called(ctx)

	if len(ret) == 0 {
		panic("no return value specified for Ping")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context) error); ok {
		r0 = rf(ctx)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// SaveTimeLockExpireCheck provides a mock function with given fields: ctx, stakingTxHashHex, expireHeight, txType
func (_m *DbInterface) SaveTimeLockExpireCheck(ctx context.Context, stakingTxHashHex string, expireHeight uint64, txType string) error {
	ret := _m.Called(ctx, stakingTxHashHex, expireHeight, txType)

	if len(ret) == 0 {
		panic("no return value specified for SaveTimeLockExpireCheck")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, string, uint64, string) error); ok {
		r0 = rf(ctx, stakingTxHashHex, expireHeight, txType)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// TransitionToUnbondedState provides a mock function with given fields: ctx, stakingTxHashHex, eligiblePreviousStates
func (_m *DbInterface) TransitionToUnbondedState(ctx context.Context, stakingTxHashHex string, eligiblePreviousStates []types.DelegationState) error {
	ret := _m.Called(ctx, stakingTxHashHex, eligiblePreviousStates)

	if len(ret) == 0 {
		panic("no return value specified for TransitionToUnbondedState")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, string, []types.DelegationState) error); ok {
		r0 = rf(ctx, stakingTxHashHex, eligiblePreviousStates)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// TransitionToUnbondingState provides a mock function with given fields: ctx, stakingTxHashHex, unbondingStartHeight, unbondingTimelock, unbondingOutputIndex, unbondingTxHex, unbondingStartTimestamp
func (_m *DbInterface) TransitionToUnbondingState(ctx context.Context, stakingTxHashHex string, unbondingStartHeight uint64, unbondingTimelock uint64, unbondingOutputIndex uint64, unbondingTxHex string, unbondingStartTimestamp int64) error {
	ret := _m.Called(ctx, stakingTxHashHex, unbondingStartHeight, unbondingTimelock, unbondingOutputIndex, unbondingTxHex, unbondingStartTimestamp)

	if len(ret) == 0 {
		panic("no return value specified for TransitionToUnbondingState")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, string, uint64, uint64, uint64, string, int64) error); ok {
		r0 = rf(ctx, stakingTxHashHex, unbondingStartHeight, unbondingTimelock, unbondingOutputIndex, unbondingTxHex, unbondingStartTimestamp)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// TransitionToWithdrawnState provides a mock function with given fields: ctx, stakingTxHashHex, eligiblePreviousStates
func (_m *DbInterface) TransitionToWithdrawnState(ctx context.Context, stakingTxHashHex string, eligiblePreviousStates []types.DelegationState) error {
	ret := _m.Called(ctx, stakingTxHashHex, eligiblePreviousStates)

	if len(ret) == 0 {
		panic("no return value specified for TransitionToWithdrawnState")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, string, []types.DelegationState) error); ok {
		r0 = rf(ctx, stakingTxHashHex, eligiblePreviousStates)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// NewDbInterface creates a new instance of DbInterface. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewDbInterface(t interface {
	mock.TestingT
	Cleanup(func())
}) *DbInterface {
	mock := &DbInterface{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
